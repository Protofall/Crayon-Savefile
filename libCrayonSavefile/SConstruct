#Get arguments in the format we want
PLATFORM = ARGUMENTS.get('PLATFORM')
DEBUG = str(ARGUMENTS.get('DEBUG')).lower()	#I convert to string since 'None' type can't be lowered
if DEBUG == 'true' or DEBUG == '1':
	DEBUG = True
if DEBUG == 'false' or DEBUG == '0' or DEBUG == 'none':
	DEBUG = False

#Check if arguments are valid
supported_platforms = ['dreamcast', 'pc', 'all']
if PLATFORM == None or PLATFORM not in supported_platforms or DEBUG != False and DEBUG != True:
	print """
	Please specify the target platform to compile or clean Crayon Savefile for on the command
	line (eg. `scons PLATFORM=dreamcast DEBUG=false`).
	"""
	print "\tSupported platforms are:"
	for p in supported_platforms:
		print "\t- " + p

	exit(1)

#Create the environments and platform name
import os
env = list()
specific_platform = list()
include_path = '#/include/crayon_savefile/'
if PLATFORM == 'dreamcast' or PLATFORM == 'all':
	# The # symbol means relative to our working directory
	env.append(Environment(CPPPATH = include_path, CC = 'kos-cc', AR = 'kos-ar'))

	env[-1].AppendENVPath('PATH', [os.environ['PATH']]) #Fixes the "Unable to find kos-cc" thing
														#You could just add "ENV = os.environ" to the constructor instead
	env[-1]['ENV'].update({k: v for k, v in os.environ.items() if k.startswith('KOS_')})	#Adding in KOS vars
	env[-1]['LIBPREFIX'] = 'lib'	#Making sure we use the right prefix and suffix
	env[-1]['LIBSUFFIX'] = '.a'
	specific_platform.append('dreamcast')

from sys import platform
if PLATFORM == 'pc' or PLATFORM == 'all':
	env.append(Environment(CPPPATH = include_path))
	env[-1].AppendUnique(CFLAGS = ["-fdiagnostics-color=always"])	#Enables GCC colour (Since it normally only
																	#does colour for terminals and scons is just
																	#an "output")
	if platform.startswith('linux') == True:
		specific_platform.append('linux')
	elif platform == "win32":
		specific_platform.append('windows')
	elif platform == "darwin":
		specific_platform.append('mac')
	else:
		print "Platform \"" + platform + "\" isn't supported"
		exit(1)

#Create our library/s
for e, p in zip(env, specific_platform):	#zip stops at the shorter of the two lists
	#Add in some cflags if in debug mode
	if DEBUG == True:
		e.AppendUnique(CPPFLAGS = ['-g'])
		e.AppendUnique(CPPDEFINES = [{'CRAYON_DEBUG':1}])

	build_dir = 'build/' + p + '/'	#Don't put a #/ in front, that breaks stuff for some reason
	e.VariantDir(build_dir, 'code', duplicate=0)	#Kind of moves over the processing for the code directory to our build dir
													#duplicate=0 means it won't duplicate the src files

	prog_files = Glob('#/' + build_dir + '*.c') #I know its weird, but we have to specify the output path here
	e.Library(target = '#/lib/' + p + '/' + 'CrayonSavefile', source = prog_files)

#Get arguments in the format we want
PLATFORM = ARGUMENTS.get('PLATFORM')
DEBUG = str(ARGUMENTS.get('DEBUG')).lower()	#I convert to string since 'None' type can't be lowered
if DEBUG == 'true' or DEBUG == '1':
	DEBUG = True
if DEBUG == 'false' or DEBUG == '0' or DEBUG == 'none':
	DEBUG = False

#Check if arguments are valid
supported_platforms = ['dreamcast', 'pc', 'all']
if PLATFORM == None or PLATFORM not in supported_platforms or (DEBUG != False and DEBUG != True):
	print("""
	Please specify the target platform to compile or clean Crayon Savefile for. You can also
	optionally enable debug flags. By default debug is false.

	eg. `scons PLATFORM=dreamcast DEBUG=false`.
	""")
	print("\tSupported platforms are:")
	for p in supported_platforms:
		print("\t- " + p)

	exit(1)

#Create the environments and platform name
import os
env = list()
specific_platform = list()
# The # symbol means relative to our working directory
include_path = '#/include/crayon_savefile/'
if PLATFORM == 'dreamcast' or PLATFORM == 'all':
	env.append(Environment(ENV = os.environ, CPPPATH = include_path, CC = 'kos-cc', CXX = 'kos-c++', AR = 'kos-ar'))

	#Making sure we use the right prefix and suffix
	env[-1]['LIBPREFIX'] = 'lib'
	env[-1]['LIBSUFFIX'] = '.a'

	#Enables GCC colour (Since it normally only does colour for terminals and scons is just an "output")
	#Major, Minor, Patch version numbers
	our_version = list(map(int, env[-1]['CCVERSION'].split(".")))
	if our_version[0] >= 4 and our_version[1] >= 9 and our_version[2] >= 0:
		env[-1].AppendUnique(CFLAGS = ["-fdiagnostics-color=always"])

	specific_platform.append('dreamcast')


from sys import platform
if PLATFORM == 'pc' or PLATFORM == 'all':
	env.append(Environment(CPPPATH = include_path))

	#Enables GCC colour (Since it normally only does colour for terminals and scons is just an "output")
	#Major, Minor, Patch version numbers
	#We need the CC and CXX checks because this flag is only for GCC/G++
	our_version = list(map(int, env[-1]['CCVERSION'].split(".")))
	if (our_version[0] >= 4 and our_version[1] >= 9 and our_version[2] >= 0 and
		(env[-1]['CC'] is 'gcc' or env[-1]['CXX'] is 'g++')):
		env[-1].AppendUnique(CFLAGS = ["-fdiagnostics-color=always"])

	if platform.startswith('linux') == True:
		specific_platform.append('linux')
	elif platform == "win32":
		specific_platform.append('windows')
	elif platform == "darwin":
		specific_platform.append('mac')
	else:
		print("Platform \"" + platform + "\" isn't supported")
		exit(1)

#Create our library/s
for e, p in zip(env, specific_platform):	#zip stops at the shorter of the two lists
	#Add in some cflags if in debug mode
	if DEBUG == True:
		e.AppendUnique(CPPDEFINES = [{'CRAYON_DEBUG':1}])
		#Wformat level 2 has extra checks over standard.
		#no-common is where two files define the same global var when they should be seperate
		#g3 is like g, but it includes macro information
		e.AppendUnique(CPPFLAGS = ['-g3', '-Wall', '-Wformat=2', '-fno-common'])
		#These can be helpful sometimes
		#conversion will check for type conversions (eg uint8_t var = (U32 VAR))
		#no-unused-parameter disables said check
		# e.AppendUnique(CPPFLAGS = ['-Wconversion', '-Wno-unused-parameter'])

	build_dir = 'build/' + p + '/'	#Don't put a #/ in front, that breaks stuff for some reason
	e.VariantDir(build_dir, 'code', duplicate=0)	#Kind of moves over the processing for the code
													#directory to our build dir duplicate=0 means it
													#won't duplicate the src files

	prog_files = Glob('#/' + build_dir + '*.c') #I know its weird, but we have to specify the output path here
	e.Library(target = '#/lib/' + p + '/' + 'CrayonSavefile', source = prog_files)
